using System;
using System.Diagnostics;
using AdvancedChatFeatures.Helpers;
using Microsoft.Xna.Framework.Graphics;
using Terraria.ModLoader;
using Terraria.UI.Chat;

public class ModIconSnippet : TextSnippet
{
    private readonly string modName;

    public ModIconSnippet(string modName) : base("")
    {
        this.modName = modName;
        Color = Color.White;
    }

    public override bool UniqueDraw(bool justCheckingString, out Vector2 size, SpriteBatch spriteBatch, Vector2 position = default, Color color = default, float scale = 1)
    {
        size = new Vector2(20, 20) * scale;

        if (!justCheckingString)
        {
            //DrawHelper.DrawPlayerHead(position, scale, spriteBatch);
        }

        return true;
    }

    public static string GetModName(bool whitespace = false)
    {
        string name = string.Empty;

        StackFrame[] frames;
        try
        {
            frames = new StackTrace(true).GetFrames();
            Logging.PrettifyStackTraceSources(frames);
            int index = 2;
            while (index < frames.Length && frames[index].GetMethod().Name.Contains("NewText"))
                index++;
            if (index == frames.Length)
                name = string.Empty;
            else
            {
                var frame = frames[index];
                var method = frame.GetMethod();

                Type declaringType = method.DeclaringType;
                if (declaringType != null)
                {
                    name = declaringType.Namespace;
                    name = name.Split('.')[0];
                }
                else
                {
                    //Autogenerated methods (i.e. MonoMod detours) do not have a declaring type, default to Terraria
                    name = "Terraria";
                }

                if (name != "Terraria")
                {
                    {
                        Mod mod = ModLoader.GetMod(name);
                        mod ??= ModLoader.GetMod(name + "Mod");
                        if (mod != null)
                            name = mod.DisplayName;
                    }
                }
            }
        }
        catch
        {
            Log.Info("guh");
        }
        if (string.IsNullOrEmpty(name))
            return string.Empty;
        return $"[{name}]" + (whitespace ? " " : "");
    }

    private static string GetCallingName(bool whitespace = false)
    {
        string name = string.Empty;

        StackFrame[] frames/* = new StackFrame[1]*/;
        try
        {
            frames = new StackTrace(true).GetFrames();
            Logging.PrettifyStackTraceSources(frames);
            int index = 2;
            while (index < frames.Length && frames[index].GetMethod().Name.Contains("NewText"))
                index++;
            if (index == frames.Length)
                name = string.Empty;
            else
            {
                var frame = frames[index];
                var method = frame.GetMethod();

                Type declaringType = method.DeclaringType;
                if (declaringType != null)
                {
                    name = declaringType.Namespace;
                    name = name.Split('.')[0];
                }
                else
                {
                    //Autogenerated methods (i.e. MonoMod detours) do not have a declaring type, default to Terraria
                    name = "Terraria";
                }

                if (name != "Terraria")
                {
                    //if (Config.Instance.ShowDisplayName)
                    {
                        Mod mod = ModLoader.GetMod(name);
                        if (mod == null)
                        {
                            mod = ModLoader.GetMod(name + "Mod");
                        }
                        if (mod != null)
                        {
                            name = mod.DisplayName;
                        }
                    }
                }
                //else if (!Config.Instance.DisplayTerrariaSource)
                {
                    //name = string.Empty;
                }
            }
        }
        catch
        {
            Log.Info("guh");
        }
        if (string.IsNullOrEmpty(name))
            return string.Empty;
        return $"[{name}]" + (whitespace ? " " : "");
    }
}
